/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: packages/framework/core/core/src/yahoo/finance/pricing-data.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
export class Ticker extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        id?: string;
        price?: number;
        time?: number;
        currency?: string;
        exchange?: string;
        quoteType?: Ticker.QuoteType;
        marketHours?: Ticker.MarketHoursType;
        changePercent?: number;
        dayVolume?: number;
        dayHigh?: number;
        dayLow?: number;
        change?: number;
        shortName?: string;
        expireDate?: number;
        openPrice?: number;
        previousClose?: number;
        strikePrice?: number;
        underlyingSymbol?: string;
        openInterest?: number;
        optionsType?: Ticker.OptionType;
        miniOption?: number;
        lastSize?: number;
        bid?: number;
        bidSize?: number;
        ask?: number;
        askSize?: number;
        priceHint?: number;
        vol_24hr?: number;
        volAllCurrencies?: number;
        fromcurrency?: string;
        lastMarket?: string;
        circulatingSupply?: number;
        marketcap?: number;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('id' in data && data.id != undefined) {
        this.id = data.id;
      }
      if ('price' in data && data.price != undefined) {
        this.price = data.price;
      }
      if ('time' in data && data.time != undefined) {
        this.time = data.time;
      }
      if ('currency' in data && data.currency != undefined) {
        this.currency = data.currency;
      }
      if ('exchange' in data && data.exchange != undefined) {
        this.exchange = data.exchange;
      }
      if ('quoteType' in data && data.quoteType != undefined) {
        this.quoteType = data.quoteType;
      }
      if ('marketHours' in data && data.marketHours != undefined) {
        this.marketHours = data.marketHours;
      }
      if ('changePercent' in data && data.changePercent != undefined) {
        this.changePercent = data.changePercent;
      }
      if ('dayVolume' in data && data.dayVolume != undefined) {
        this.dayVolume = data.dayVolume;
      }
      if ('dayHigh' in data && data.dayHigh != undefined) {
        this.dayHigh = data.dayHigh;
      }
      if ('dayLow' in data && data.dayLow != undefined) {
        this.dayLow = data.dayLow;
      }
      if ('change' in data && data.change != undefined) {
        this.change = data.change;
      }
      if ('shortName' in data && data.shortName != undefined) {
        this.shortName = data.shortName;
      }
      if ('expireDate' in data && data.expireDate != undefined) {
        this.expireDate = data.expireDate;
      }
      if ('openPrice' in data && data.openPrice != undefined) {
        this.openPrice = data.openPrice;
      }
      if ('previousClose' in data && data.previousClose != undefined) {
        this.previousClose = data.previousClose;
      }
      if ('strikePrice' in data && data.strikePrice != undefined) {
        this.strikePrice = data.strikePrice;
      }
      if ('underlyingSymbol' in data && data.underlyingSymbol != undefined) {
        this.underlyingSymbol = data.underlyingSymbol;
      }
      if ('openInterest' in data && data.openInterest != undefined) {
        this.openInterest = data.openInterest;
      }
      if ('optionsType' in data && data.optionsType != undefined) {
        this.optionsType = data.optionsType;
      }
      if ('miniOption' in data && data.miniOption != undefined) {
        this.miniOption = data.miniOption;
      }
      if ('lastSize' in data && data.lastSize != undefined) {
        this.lastSize = data.lastSize;
      }
      if ('bid' in data && data.bid != undefined) {
        this.bid = data.bid;
      }
      if ('bidSize' in data && data.bidSize != undefined) {
        this.bidSize = data.bidSize;
      }
      if ('ask' in data && data.ask != undefined) {
        this.ask = data.ask;
      }
      if ('askSize' in data && data.askSize != undefined) {
        this.askSize = data.askSize;
      }
      if ('priceHint' in data && data.priceHint != undefined) {
        this.priceHint = data.priceHint;
      }
      if ('vol_24hr' in data && data.vol_24hr != undefined) {
        this.vol_24hr = data.vol_24hr;
      }
      if ('volAllCurrencies' in data && data.volAllCurrencies != undefined) {
        this.volAllCurrencies = data.volAllCurrencies;
      }
      if ('fromcurrency' in data && data.fromcurrency != undefined) {
        this.fromcurrency = data.fromcurrency;
      }
      if ('lastMarket' in data && data.lastMarket != undefined) {
        this.lastMarket = data.lastMarket;
      }
      if ('circulatingSupply' in data && data.circulatingSupply != undefined) {
        this.circulatingSupply = data.circulatingSupply;
      }
      if ('marketcap' in data && data.marketcap != undefined) {
        this.marketcap = data.marketcap;
      }
    }
  }
  get id() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
  }
  set id(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get price() {
    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
  }
  set price(value: number) {
    pb_1.Message.setField(this, 2, value);
  }
  get time() {
    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
  }
  set time(value: number) {
    pb_1.Message.setField(this, 3, value);
  }
  get currency() {
    return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
  }
  set currency(value: string) {
    pb_1.Message.setField(this, 4, value);
  }
  get exchange() {
    return pb_1.Message.getFieldWithDefault(this, 5, '') as string;
  }
  set exchange(value: string) {
    pb_1.Message.setField(this, 5, value);
  }
  get quoteType() {
    return pb_1.Message.getFieldWithDefault(this, 6, Ticker.QuoteType.NONE) as Ticker.QuoteType;
  }
  set quoteType(value: Ticker.QuoteType) {
    pb_1.Message.setField(this, 6, value);
  }
  get marketHours() {
    return pb_1.Message.getFieldWithDefault(this, 7, Ticker.MarketHoursType.PRE_MARKET) as Ticker.MarketHoursType;
  }
  set marketHours(value: Ticker.MarketHoursType) {
    pb_1.Message.setField(this, 7, value);
  }
  get changePercent() {
    return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
  }
  set changePercent(value: number) {
    pb_1.Message.setField(this, 8, value);
  }
  get dayVolume() {
    return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
  }
  set dayVolume(value: number) {
    pb_1.Message.setField(this, 9, value);
  }
  get dayHigh() {
    return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
  }
  set dayHigh(value: number) {
    pb_1.Message.setField(this, 10, value);
  }
  get dayLow() {
    return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
  }
  set dayLow(value: number) {
    pb_1.Message.setField(this, 11, value);
  }
  get change() {
    return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
  }
  set change(value: number) {
    pb_1.Message.setField(this, 12, value);
  }
  get shortName() {
    return pb_1.Message.getFieldWithDefault(this, 13, '') as string;
  }
  set shortName(value: string) {
    pb_1.Message.setField(this, 13, value);
  }
  get expireDate() {
    return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
  }
  set expireDate(value: number) {
    pb_1.Message.setField(this, 14, value);
  }
  get openPrice() {
    return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
  }
  set openPrice(value: number) {
    pb_1.Message.setField(this, 15, value);
  }
  get previousClose() {
    return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
  }
  set previousClose(value: number) {
    pb_1.Message.setField(this, 16, value);
  }
  get strikePrice() {
    return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
  }
  set strikePrice(value: number) {
    pb_1.Message.setField(this, 17, value);
  }
  get underlyingSymbol() {
    return pb_1.Message.getFieldWithDefault(this, 18, '') as string;
  }
  set underlyingSymbol(value: string) {
    pb_1.Message.setField(this, 18, value);
  }
  get openInterest() {
    return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
  }
  set openInterest(value: number) {
    pb_1.Message.setField(this, 19, value);
  }
  get optionsType() {
    return pb_1.Message.getFieldWithDefault(this, 20, Ticker.OptionType.CALL) as Ticker.OptionType;
  }
  set optionsType(value: Ticker.OptionType) {
    pb_1.Message.setField(this, 20, value);
  }
  get miniOption() {
    return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
  }
  set miniOption(value: number) {
    pb_1.Message.setField(this, 21, value);
  }
  get lastSize() {
    return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
  }
  set lastSize(value: number) {
    pb_1.Message.setField(this, 22, value);
  }
  get bid() {
    return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
  }
  set bid(value: number) {
    pb_1.Message.setField(this, 23, value);
  }
  get bidSize() {
    return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
  }
  set bidSize(value: number) {
    pb_1.Message.setField(this, 24, value);
  }
  get ask() {
    return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
  }
  set ask(value: number) {
    pb_1.Message.setField(this, 25, value);
  }
  get askSize() {
    return pb_1.Message.getFieldWithDefault(this, 26, 0) as number;
  }
  set askSize(value: number) {
    pb_1.Message.setField(this, 26, value);
  }
  get priceHint() {
    return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
  }
  set priceHint(value: number) {
    pb_1.Message.setField(this, 27, value);
  }
  get vol_24hr() {
    return pb_1.Message.getFieldWithDefault(this, 28, 0) as number;
  }
  set vol_24hr(value: number) {
    pb_1.Message.setField(this, 28, value);
  }
  get volAllCurrencies() {
    return pb_1.Message.getFieldWithDefault(this, 29, 0) as number;
  }
  set volAllCurrencies(value: number) {
    pb_1.Message.setField(this, 29, value);
  }
  get fromcurrency() {
    return pb_1.Message.getFieldWithDefault(this, 30, '') as string;
  }
  set fromcurrency(value: string) {
    pb_1.Message.setField(this, 30, value);
  }
  get lastMarket() {
    return pb_1.Message.getFieldWithDefault(this, 31, '') as string;
  }
  set lastMarket(value: string) {
    pb_1.Message.setField(this, 31, value);
  }
  get circulatingSupply() {
    return pb_1.Message.getFieldWithDefault(this, 32, 0) as number;
  }
  set circulatingSupply(value: number) {
    pb_1.Message.setField(this, 32, value);
  }
  get marketcap() {
    return pb_1.Message.getFieldWithDefault(this, 33, 0) as number;
  }
  set marketcap(value: number) {
    pb_1.Message.setField(this, 33, value);
  }
  static fromObject(data: {
        id?: string;
        price?: number;
        time?: number;
        currency?: string;
        exchange?: string;
        quoteType?: Ticker.QuoteType;
        marketHours?: Ticker.MarketHoursType;
        changePercent?: number;
        dayVolume?: number;
        dayHigh?: number;
        dayLow?: number;
        change?: number;
        shortName?: string;
        expireDate?: number;
        openPrice?: number;
        previousClose?: number;
        strikePrice?: number;
        underlyingSymbol?: string;
        openInterest?: number;
        optionsType?: Ticker.OptionType;
        miniOption?: number;
        lastSize?: number;
        bid?: number;
        bidSize?: number;
        ask?: number;
        askSize?: number;
        priceHint?: number;
        vol_24hr?: number;
        volAllCurrencies?: number;
        fromcurrency?: string;
        lastMarket?: string;
        circulatingSupply?: number;
        marketcap?: number;
    }): Ticker {
    const message = new Ticker({});
    if (data.id != null) {
      message.id = data.id;
    }
    if (data.price != null) {
      message.price = data.price;
    }
    if (data.time != null) {
      message.time = data.time;
    }
    if (data.currency != null) {
      message.currency = data.currency;
    }
    if (data.exchange != null) {
      message.exchange = data.exchange;
    }
    if (data.quoteType != null) {
      message.quoteType = data.quoteType;
    }
    if (data.marketHours != null) {
      message.marketHours = data.marketHours;
    }
    if (data.changePercent != null) {
      message.changePercent = data.changePercent;
    }
    if (data.dayVolume != null) {
      message.dayVolume = data.dayVolume;
    }
    if (data.dayHigh != null) {
      message.dayHigh = data.dayHigh;
    }
    if (data.dayLow != null) {
      message.dayLow = data.dayLow;
    }
    if (data.change != null) {
      message.change = data.change;
    }
    if (data.shortName != null) {
      message.shortName = data.shortName;
    }
    if (data.expireDate != null) {
      message.expireDate = data.expireDate;
    }
    if (data.openPrice != null) {
      message.openPrice = data.openPrice;
    }
    if (data.previousClose != null) {
      message.previousClose = data.previousClose;
    }
    if (data.strikePrice != null) {
      message.strikePrice = data.strikePrice;
    }
    if (data.underlyingSymbol != null) {
      message.underlyingSymbol = data.underlyingSymbol;
    }
    if (data.openInterest != null) {
      message.openInterest = data.openInterest;
    }
    if (data.optionsType != null) {
      message.optionsType = data.optionsType;
    }
    if (data.miniOption != null) {
      message.miniOption = data.miniOption;
    }
    if (data.lastSize != null) {
      message.lastSize = data.lastSize;
    }
    if (data.bid != null) {
      message.bid = data.bid;
    }
    if (data.bidSize != null) {
      message.bidSize = data.bidSize;
    }
    if (data.ask != null) {
      message.ask = data.ask;
    }
    if (data.askSize != null) {
      message.askSize = data.askSize;
    }
    if (data.priceHint != null) {
      message.priceHint = data.priceHint;
    }
    if (data.vol_24hr != null) {
      message.vol_24hr = data.vol_24hr;
    }
    if (data.volAllCurrencies != null) {
      message.volAllCurrencies = data.volAllCurrencies;
    }
    if (data.fromcurrency != null) {
      message.fromcurrency = data.fromcurrency;
    }
    if (data.lastMarket != null) {
      message.lastMarket = data.lastMarket;
    }
    if (data.circulatingSupply != null) {
      message.circulatingSupply = data.circulatingSupply;
    }
    if (data.marketcap != null) {
      message.marketcap = data.marketcap;
    }
    return message;
  }
  toObject() {
    const data: {
            id?: string;
            price?: number;
            time?: number;
            currency?: string;
            exchange?: string;
            quoteType?: Ticker.QuoteType;
            marketHours?: Ticker.MarketHoursType;
            changePercent?: number;
            dayVolume?: number;
            dayHigh?: number;
            dayLow?: number;
            change?: number;
            shortName?: string;
            expireDate?: number;
            openPrice?: number;
            previousClose?: number;
            strikePrice?: number;
            underlyingSymbol?: string;
            openInterest?: number;
            optionsType?: Ticker.OptionType;
            miniOption?: number;
            lastSize?: number;
            bid?: number;
            bidSize?: number;
            ask?: number;
            askSize?: number;
            priceHint?: number;
            vol_24hr?: number;
            volAllCurrencies?: number;
            fromcurrency?: string;
            lastMarket?: string;
            circulatingSupply?: number;
            marketcap?: number;
        } = {};
    if (this.id != null) {
      data.id = this.id;
    }
    if (this.price != null) {
      data.price = this.price;
    }
    if (this.time != null) {
      data.time = this.time;
    }
    if (this.currency != null) {
      data.currency = this.currency;
    }
    if (this.exchange != null) {
      data.exchange = this.exchange;
    }
    if (this.quoteType != null) {
      data.quoteType = this.quoteType;
    }
    if (this.marketHours != null) {
      data.marketHours = this.marketHours;
    }
    if (this.changePercent != null) {
      data.changePercent = this.changePercent;
    }
    if (this.dayVolume != null) {
      data.dayVolume = this.dayVolume;
    }
    if (this.dayHigh != null) {
      data.dayHigh = this.dayHigh;
    }
    if (this.dayLow != null) {
      data.dayLow = this.dayLow;
    }
    if (this.change != null) {
      data.change = this.change;
    }
    if (this.shortName != null) {
      data.shortName = this.shortName;
    }
    if (this.expireDate != null) {
      data.expireDate = this.expireDate;
    }
    if (this.openPrice != null) {
      data.openPrice = this.openPrice;
    }
    if (this.previousClose != null) {
      data.previousClose = this.previousClose;
    }
    if (this.strikePrice != null) {
      data.strikePrice = this.strikePrice;
    }
    if (this.underlyingSymbol != null) {
      data.underlyingSymbol = this.underlyingSymbol;
    }
    if (this.openInterest != null) {
      data.openInterest = this.openInterest;
    }
    if (this.optionsType != null) {
      data.optionsType = this.optionsType;
    }
    if (this.miniOption != null) {
      data.miniOption = this.miniOption;
    }
    if (this.lastSize != null) {
      data.lastSize = this.lastSize;
    }
    if (this.bid != null) {
      data.bid = this.bid;
    }
    if (this.bidSize != null) {
      data.bidSize = this.bidSize;
    }
    if (this.ask != null) {
      data.ask = this.ask;
    }
    if (this.askSize != null) {
      data.askSize = this.askSize;
    }
    if (this.priceHint != null) {
      data.priceHint = this.priceHint;
    }
    if (this.vol_24hr != null) {
      data.vol_24hr = this.vol_24hr;
    }
    if (this.volAllCurrencies != null) {
      data.volAllCurrencies = this.volAllCurrencies;
    }
    if (this.fromcurrency != null) {
      data.fromcurrency = this.fromcurrency;
    }
    if (this.lastMarket != null) {
      data.lastMarket = this.lastMarket;
    }
    if (this.circulatingSupply != null) {
      data.circulatingSupply = this.circulatingSupply;
    }
    if (this.marketcap != null) {
      data.marketcap = this.marketcap;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.id.length) {
      writer.writeString(1, this.id);
    }
    if (this.price != 0) {
      writer.writeFloat(2, this.price);
    }
    if (this.time != 0) {
      writer.writeSint64(3, this.time);
    }
    if (this.currency.length) {
      writer.writeString(4, this.currency);
    }
    if (this.exchange.length) {
      writer.writeString(5, this.exchange);
    }
    if (this.quoteType != Ticker.QuoteType.NONE) {
      writer.writeEnum(6, this.quoteType);
    }
    if (this.marketHours != Ticker.MarketHoursType.PRE_MARKET) {
      writer.writeEnum(7, this.marketHours);
    }
    if (this.changePercent != 0) {
      writer.writeFloat(8, this.changePercent);
    }
    if (this.dayVolume != 0) {
      writer.writeSint64(9, this.dayVolume);
    }
    if (this.dayHigh != 0) {
      writer.writeFloat(10, this.dayHigh);
    }
    if (this.dayLow != 0) {
      writer.writeFloat(11, this.dayLow);
    }
    if (this.change != 0) {
      writer.writeFloat(12, this.change);
    }
    if (this.shortName.length) {
      writer.writeString(13, this.shortName);
    }
    if (this.expireDate != 0) {
      writer.writeSint64(14, this.expireDate);
    }
    if (this.openPrice != 0) {
      writer.writeFloat(15, this.openPrice);
    }
    if (this.previousClose != 0) {
      writer.writeFloat(16, this.previousClose);
    }
    if (this.strikePrice != 0) {
      writer.writeFloat(17, this.strikePrice);
    }
    if (this.underlyingSymbol.length) {
      writer.writeString(18, this.underlyingSymbol);
    }
    if (this.openInterest != 0) {
      writer.writeSint64(19, this.openInterest);
    }
    if (this.optionsType != Ticker.OptionType.CALL) {
      writer.writeEnum(20, this.optionsType);
    }
    if (this.miniOption != 0) {
      writer.writeSint64(21, this.miniOption);
    }
    if (this.lastSize != 0) {
      writer.writeSint64(22, this.lastSize);
    }
    if (this.bid != 0) {
      writer.writeFloat(23, this.bid);
    }
    if (this.bidSize != 0) {
      writer.writeSint64(24, this.bidSize);
    }
    if (this.ask != 0) {
      writer.writeFloat(25, this.ask);
    }
    if (this.askSize != 0) {
      writer.writeSint64(26, this.askSize);
    }
    if (this.priceHint != 0) {
      writer.writeSint64(27, this.priceHint);
    }
    if (this.vol_24hr != 0) {
      writer.writeSint64(28, this.vol_24hr);
    }
    if (this.volAllCurrencies != 0) {
      writer.writeSint64(29, this.volAllCurrencies);
    }
    if (this.fromcurrency.length) {
      writer.writeString(30, this.fromcurrency);
    }
    if (this.lastMarket.length) {
      writer.writeString(31, this.lastMarket);
    }
    if (this.circulatingSupply != 0) {
      writer.writeDouble(32, this.circulatingSupply);
    }
    if (this.marketcap != 0) {
      writer.writeDouble(33, this.marketcap);
    }
    if (!w) {
      return writer.getResultBuffer();
    }
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ticker {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes); const message = new Ticker();
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      switch (reader.getFieldNumber()) {
      case 1:
        message.id = reader.readString();
        break;
      case 2:
        message.price = reader.readFloat();
        break;
      case 3:
        message.time = reader.readSint64();
        break;
      case 4:
        message.currency = reader.readString();
        break;
      case 5:
        message.exchange = reader.readString();
        break;
      case 6:
        message.quoteType = reader.readEnum();
        break;
      case 7:
        message.marketHours = reader.readEnum();
        break;
      case 8:
        message.changePercent = reader.readFloat();
        break;
      case 9:
        message.dayVolume = reader.readSint64();
        break;
      case 10:
        message.dayHigh = reader.readFloat();
        break;
      case 11:
        message.dayLow = reader.readFloat();
        break;
      case 12:
        message.change = reader.readFloat();
        break;
      case 13:
        message.shortName = reader.readString();
        break;
      case 14:
        message.expireDate = reader.readSint64();
        break;
      case 15:
        message.openPrice = reader.readFloat();
        break;
      case 16:
        message.previousClose = reader.readFloat();
        break;
      case 17:
        message.strikePrice = reader.readFloat();
        break;
      case 18:
        message.underlyingSymbol = reader.readString();
        break;
      case 19:
        message.openInterest = reader.readSint64();
        break;
      case 20:
        message.optionsType = reader.readEnum();
        break;
      case 21:
        message.miniOption = reader.readSint64();
        break;
      case 22:
        message.lastSize = reader.readSint64();
        break;
      case 23:
        message.bid = reader.readFloat();
        break;
      case 24:
        message.bidSize = reader.readSint64();
        break;
      case 25:
        message.ask = reader.readFloat();
        break;
      case 26:
        message.askSize = reader.readSint64();
        break;
      case 27:
        message.priceHint = reader.readSint64();
        break;
      case 28:
        message.vol_24hr = reader.readSint64();
        break;
      case 29:
        message.volAllCurrencies = reader.readSint64();
        break;
      case 30:
        message.fromcurrency = reader.readString();
        break;
      case 31:
        message.lastMarket = reader.readString();
        break;
      case 32:
        message.circulatingSupply = reader.readDouble();
        break;
      case 33:
        message.marketcap = reader.readDouble();
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): Ticker {
    return Ticker.deserialize(bytes);
  }
}
export namespace Ticker {
    export enum QuoteType {
        NONE = 0,
        ALTSYMBOL = 5,
        HEARTBEAT = 7,
        EQUITY = 8,
        INDEX = 9,
        MUTUALFUND = 11,
        MONEYMARKET = 12,
        OPTION = 13,
        CURRENCY = 14,
        WARRANT = 15,
        BOND = 17,
        FUTURE = 18,
        ETF = 20,
        COMMODITY = 23,
        ECNQUOTE = 28,
        CRYPTOCURRENCY = 41,
        INDICATOR = 42,
        INDUSTRY = 1000
    }
    export enum MarketHoursType {
        PRE_MARKET = 0,
        REGULAR_MARKET = 1,
        POST_MARKET = 2,
        EXTENDED_HOURS_MARKET = 3
    }
    export enum OptionType {
        CALL = 0,
        PUT = 1
    }
}
